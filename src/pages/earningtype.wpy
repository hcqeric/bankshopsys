<style lang="less">
  .m-page{
    .notification-list-box{
      box-sizing: border-box;
      padding: 16rpx;
      .notification-list-item{
        position: relative;
        padding: 16rpx 0;
        &:after{
          position: absolute;
          content: '';
          bottom: 0;
          left: 0;
          height: 1px;
          width: 100%;
          background: #eee;
        }
      }
      .notification-list-item:last-of-type{
        &:after{
          height: 0px;
        }
      }
    }
  }
</style>
<template>
  <view class="m-page">
    <view class="notification-list-box">
      <repeat  for="{{notificationList}}" key="index" index="index" item="item">
        <!--<orderItem :orderList.sync="orderList" class="swiper-item-order"></orderItem>-->
        <notification class="notification-list-item" :notificationInfo="item"></notification>
      </repeat>
    </view>
    <!--&lt;!&ndash;加载更多时动画&ndash;&gt;-->
    <!--<bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>-->
    <!--暂无数据显示-->
    <placeholder :show.sync="is_empty" :topZero="is_top" message="暂无发现数据"></placeholder>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import NotificationItem from "../components/notificationitem"
  import Placeholder from "../components/common/placeholder"
  import {getEarningListByType} from '../http/getData';

  export default class Notification extends wepy.page {
    config = {
      enablePullDownRefresh: true,
    }

    components = {
      notification: NotificationItem,
      placeholder: Placeholder
    }

    data = {
      type: '',
      page: 1,
      limit: '15',
      is_empty: false,
      is_top: true,
      isPullDownRefresh: false,
      notificationList: []
    }

    onPullDownRefresh () {

      // 显示顶部刷新图标
      wepy.showNavigationBarLoading();
      this.notificationList = []
      this.isPullDownRefresh = true
      this.page = 1
      this.getEarningList()

    }
    getEarningList(){
      getEarningListByType({
        type: this.type,
        page: this.page + '',
        limit: this.limit
      }).then(response=>{
        this.totalCount = response.result.totalCount
        if (response.result.totalCount == 0){
          this.is_empty = true;
        }else{
          this.is_empty = false;
        }
        if (response.result.list != undefined) {
          response.result.list.map(item=>{
            this.notificationList.push(item)
          })
        }
        this.stopPullDown()
        this.$apply();
      }, error=>{
        this.stopPullDown()
      }).catch(error =>{
        if (this.notificationList.length > 0) {
          this.is_empty = false
        }else {
          this.is_empty = true
        }
        this.stopPullDown()
      })
    }

    stopPullDown(){
      if (this.isPullDownRefresh) {
        // 隐藏导航栏加载框
        wepy.hideNavigationBarLoading();
        // 停止下拉动作
        wepy.stopPullDownRefresh()
      }
    }

    onLoad(opt){
      this.type = opt.type
      if (this.type == 1) {
        wepy.setNavigationBarTitle({
          title: '银行卡收益'
        })
      }else if(this.type == 2){
        wepy.setNavigationBarTitle({
          title: '扫码收益'
        })
      }else if(this.type == 3){
        wepy.setNavigationBarTitle({
          title: '信用卡推荐收益'
        })
      }else if(this.type == 4){
        wepy.setNavigationBarTitle({
          title: '贷款推荐收益'
        })
      }
      this.getEarningList()
    }

    //加载更多
    onReachBottom() {
      console.log("加载更多");
      let that = this;
      if(this.totalCount - parseInt(this.limit) * this.page > 0){
        // that.showLoading = true;
        that.page++;
        that.getEarningList()
      }else{
        // that.showLoading = false;
      }
    };
  }
</script>
